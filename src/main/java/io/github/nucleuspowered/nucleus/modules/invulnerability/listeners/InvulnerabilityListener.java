/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.listeners;

import io.github.nucleuspowered.nucleus.internal.interfaces.ListenerBase;
import io.github.nucleuspowered.nucleus.modules.invulnerability.services.InvulnerabilityService;
import org.spongepowered.api.data.key.Keys;
import org.spongepowered.api.entity.Entity;
import org.spongepowered.api.entity.living.Agent;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.cause.entity.damage.source.EntityDamageSource;
import org.spongepowered.api.event.entity.DamageEntityEvent;
import org.spongepowered.api.event.entity.ai.SetAITargetEvent;
import org.spongepowered.api.event.filter.Getter;
import org.spongepowered.api.event.network.ClientConnectionEvent;

public class InvulnerabilityListener implements ListenerBase {

    private final InvulnerabilityService service = getServiceUnchecked(InvulnerabilityService.class);

    @Listener
    public void onSetAITargetEvent(SetAITargetEvent event, @Getter("getTarget") Entity entity) {
        if (entity instanceof Player && this.service.isInvulnerable((Player) entity)) {
            event.setCancelled(true); // cancel the change
        }
    }

    @Listener
    public void onPlayerStruck(DamageEntityEvent event, @Getter("getTargetEntity") Player pl) {
        if (this.service.isInvulnerable(pl)) {
            pl.offer(Keys.FIRE_TICKS, 0);
            event.setBaseDamage(0);
            event.setCancelled(true);

            event.getCause().allOf(EntityDamageSource.class).forEach(x -> {
                Entity entity = x.getSource();
                if (entity instanceof Agent) {
                    disableAI((Agent) entity, pl);
                }
            });

            event.getCause().allOf(Agent.class).forEach(f -> disableAI(f, pl));
        }
    }

    private void disableAI(Agent agent, Player pl) {
        if (agent.getTarget().map(y -> y.equals(pl)).orElse(false)) {
            agent.setTarget(null); // disable this player as the target
        }
    }

    @Listener
    public void onPlayerQuit(ClientConnectionEvent.Disconnect event) {
        this.service.removeFromCache(event.getTargetEntity().getUniqueId());
    }
}
