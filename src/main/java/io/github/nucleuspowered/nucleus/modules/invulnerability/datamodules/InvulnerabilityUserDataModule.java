/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.datamodules;

import io.github.nucleuspowered.nucleus.dataservices.modular.DataKey;
import io.github.nucleuspowered.nucleus.dataservices.modular.DataModule;
import io.github.nucleuspowered.nucleus.dataservices.modular.ModularUserService;
import org.spongepowered.api.data.key.Keys;

public class InvulnerabilityUserDataModule extends DataModule.ReferenceService<ModularUserService> {

    // Transient
    private int previousHungerValue = 20;

    @DataKey("invulnerable")
    private boolean invulnerable = false;

    public InvulnerabilityUserDataModule(ModularUserService modularDataService) {
        super(modularDataService);
    }

    public boolean isInvulnerable() {
        return this.invulnerable;
    }

    public void setInvulnerable(boolean invulnerable) {
        this.invulnerable = invulnerable;

        if (invulnerable) {
            getService().getPlayer().ifPresent(x -> this.previousHungerValue = x.get(Keys.FOOD_LEVEL).orElse(20));
        } else {
            getService().getPlayer().ifPresent(p -> p.offer(Keys.FOOD_LEVEL, this.previousHungerValue));
        }
    }
}
