/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability;

import com.google.common.collect.Lists;
import io.github.nucleuspowered.nucleus.Nucleus;
import io.github.nucleuspowered.nucleus.internal.qsml.module.ConfigurableModule;
import io.github.nucleuspowered.nucleus.modules.invulnerability.commands.GodCommand;
import io.github.nucleuspowered.nucleus.modules.invulnerability.config.InvulnerabilityConfigAdapter;
import io.github.nucleuspowered.nucleus.modules.invulnerability.services.InvulnerabilityService;
import uk.co.drnaylor.quickstart.annotations.ModuleData;

@ModuleData(id = InvulnerabilityModule.ID, name = "Invulnerability")
public class InvulnerabilityModule extends ConfigurableModule<InvulnerabilityConfigAdapter> {

    public static final String ID = "invulnerability";

    @Override
    public InvulnerabilityConfigAdapter createAdapter() {
        return new InvulnerabilityConfigAdapter();
    }

    @Override
    protected void performEnableTasks() throws Exception {
        super.performEnableTasks();

        final InvulnerabilityService is = Nucleus.getNucleus().getInternalServiceManager().getServiceUnchecked(InvulnerabilityService.class);
        createSeenModule(Nucleus.getNucleus().getPermissionRegistry().getPermissionsForNucleusCommand(GodCommand.class).getOthers(), (cs, user) -> {
            boolean godMode = is.isInvulnerable(user);
            return Lists.newArrayList(
                    Nucleus.getNucleus().getMessageProvider().getTextMessageWithFormat("seen.godmode",
                            Nucleus.getNucleus().getMessageProvider().getMessageWithFormat("standard.yesno." + Boolean.toString(godMode).toLowerCase())));
        });
    }
}
